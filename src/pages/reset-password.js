import { useState } from "react";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useMutation } from "react-query";
import { useRouter } from "next/router";
import { BsEye, BsEyeSlash } from "react-icons/bs";

import notification from "../utilities/notification";
import handleFetch from "../services/api/handleFetch";

const ResetPassword = () => {
  const router = useRouter();
  const { id, t } = router.query;
  const [newPasswordType, setNewPasswordType] = useState("password");
  const [confirmPasswordType, setConfirmPasswordType] = useState("password");
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [passwordError, setPasswordError] = useState(null);
  const [confirmedpwdError, setConfirmedpwdError] = useState(null);
  const [buttonDisabled, setButtonDisabled] = useState(true);

  const validatePassword = () => {
    const regex = /^(?=.*[\W_])(?=.*[a-zA-Z0-9]).+$/y;
    if (!regex.test(newPassword)) {
      setPasswordError("Password must be alphanumeric");
    } else if (newPassword.length < 8) {
      setPasswordError("Password must be at least 8 characters long");
    } else {
      setPasswordError(null);
    }
  };

  const validateConfirmedPwd = () => {
    if (newPassword !== confirmPassword) {
      setConfirmedpwdError("Password mismatch");
    } else {
      setConfirmedpwdError(null);
    }
  };

  const handleConfirmPasswordChange = (event) => {
    setConfirmPassword(event.target.value);
    setButtonDisabled(!(event.target.value && newPassword));
  };

  const handleNewPasswordChange = (event) => {
    setNewPassword(event.target.value);
    setButtonDisabled(!(confirmPassword && event.target.value));
  };

  const resetPasswordMutation = useMutation(handleFetch, {
    onSuccess: (res) => {
      if (res?.statusCode === 200) {
        notification({
          title: "Password Successfully Change",
          message: "You have successfully changed your password",
          type: "success",
        });
        router?.push("/reset-pwd-success");
      }
    },
    onError: (err) => {
      notification({
        title: "Error",
        message: err?.toString() || "Something went wrong.",
        type: "danger",
      });
    },
  });

  const handleResetPwd = (e) => {
    e.preventDefault();
    if (passwordError !== null || confirmedpwdError !== null) {
      notification({
        title: "Form Error",
        message: "Invalid Password",
        type: "danger",
      });
      return;
    }
    if (!(newPassword && confirmPassword)) {
      notification({
        title: "Form Error",
        message: "Please, enter your password ",
        type: "danger",
      });
      return;
    }
    resetPasswordMutation.mutate({
      endpoint: "auth",
      extra: "reset-password",
      method: "POST",
      body: {
        token: t,
        userId: id,
        newPassword,
        confirmPassword,
      },
    });
  };

  const { isLoading } = resetPasswordMutation;

  return (
    <div className="flex flex-col items-center justify-center min-h-screen  text-center">
      <Head>
        <title>Alat For Corporative</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon-new.ico" />
      </Head>
      <main className="flex flex-col w-full flex-1">
        <div className="flex w-full justify-center relative bg-dark-purple">
          <Image
            src="/new-bg.png"
            alt="Alat for Cooperative"
            className="w-full object-fill absolute bg-dark-purple"
            width={500}
            height={500}
            priority
          />
          <div className="flex p-16 flex-col w-full text-center justify-center items-center z-10">
            <Link href="/login" className="cursor-pointer">
              <Image
                src="/logo.png"
                alt="Alat for Cooperative"
                width={75}
                height={75}
              />
            </Link>
            <div className="bg-white w-full max-w-md mt-10 p-10 py-14 rounded-md text-left">
              <div>
                <h2 className="text-3xl font-bold mb-4 text-dark-purple">
                  Reset Password
                </h2>
                <p className="text-gray-500">
                  Kindly input you new password to rest your password
                </p>
              </div>
              <div className="mt-6">
                <label className="font-semibold w-full">New Password</label>
                <div className="p-2 flex mb-3 mt-3 rounded-md border justify-between items-center  border-input-outline bg-input-fill">
                  <input
                    type={newPasswordType}
                    name="password"
                    value={newPassword}
                    onChange={handleNewPasswordChange}
                    onBlur={validatePassword}
                    label="Password"
                    placeholder="Password"
                    className="bg-input-fill outline-none text-sm flex-1 h-8"
                  />
                  <span className=" text-gray-700">
                    {newPasswordType === "password" ? (
                      <BsEye
                        className="w-5 h-auto cursor-pointer items-center text-[#B5B6B6]"
                        onClick={() => setNewPasswordType("text")}
                      />
                    ) : (
                      <BsEyeSlash
                        className="w-5 h-auto cursor-pointer"
                        onClick={() => setNewPasswordType("password")}
                      />
                    )}
                  </span>
                </div>
                {passwordError && (
                  <div className="text-red-800 text-xs font-bold">
                    {passwordError}
                  </div>
                )}
              </div>
              <div className="mt-6">
                <label className="font-semibold w-full">Confirm Password</label>
                <div className="p-2 flex mb-3 mt-3 rounded-md border justify-between items-center  border-input-outline bg-input-fill">
                  <input
                    type={confirmPasswordType}
                    name="password"
                    value={confirmPassword}
                    onChange={handleConfirmPasswordChange}
                    onBlur={validateConfirmedPwd}
                    label="Password"
                    placeholder="Password"
                    className="bg-input-fill outline-none text-sm flex-1 h-8"
                  />
                  <span className=" text-gray-700">
                    {confirmPasswordType === "password" ? (
                      <BsEye
                        className="w-5 h-auto cursor-pointer items-center text-[#B5B6B6]"
                        onClick={() => setConfirmPasswordType("text")}
                      />
                    ) : (
                      <BsEyeSlash
                        className="w-5 h-auto cursor-pointer"
                        onClick={() => setConfirmPasswordType("password")}
                      />
                    )}
                  </span>
                </div>
                {confirmedpwdError && (
                  <div className="text-red-800 text-xs font-bold">
                    {confirmedpwdError}
                  </div>
                )}
              </div>
              <button
                className={`${
                  buttonDisabled && "bg-light-purple text-gray-300"
                } rounded-md w-full px-12 py-2 text-center mt-8 inline-block font-semibold ${
                  !buttonDisabled &&
                  "hover:bg-dark-purple hover:text-white border border-dark-purple text-dark-purple"
                }`}
                type="submit"
                disabled={buttonDisabled}
                onClick={handleResetPwd}
              >
                {isLoading ? "Loading..." : "Reset Password"}
              </button>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};

export default ResetPassword;
