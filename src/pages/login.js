import { useEffect, useState } from "react";
import { useCookies } from "react-cookie";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useMutation } from "react-query";
import { useRouter } from "next/router";
import { BsEye, BsEyeSlash } from "react-icons/bs";

import notification from "../utilities/notification";
import handleFetch from "../services/api/handleFetch";

const Login = () => {
  const router = useRouter();
  const [inputType, setInputType] = useState("password");
  const [cookie, , removeCookie] = useCookies(["err"]);
  const [, setCookie] = useCookies(["data", "form"]);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [buttonDisabled, setButtonDisabled] = useState(true);

  const handleEmailChange = (event) => {
    setEmail(event.target.value);
    setButtonDisabled(!(event.target.value && password));
  };

  const handlePasswordChange = (event) => {
    setPassword(event.target.value);
    setButtonDisabled(!(email && event.target.value));
  };

  useEffect(() => {
    if (cookie?.err) {
      notification({
        title: "Unauthorized Access",
        message: cookie?.err,
        type: "danger",
      });
      removeCookie("err");
    }
  }, [cookie, removeCookie]);

  const loginMutation = useMutation(handleFetch, {
    onSuccess: (res) => {
      if (res?.statusCode !== 200) {
        notification({
          title: "Record not Found",
          message:
            "Invalid combination of email and password, please check your email and password",
          type: "warning",
        });
        setCookie("form", { email });
        router?.push("/login");
      } else {
        setCookie("data", res?.data, { secure: true, sameSite: true });
        router?.push("/dashboard");
      }
    },
    onError: (err) => {
      notification({
        title: "Error",
        message: err?.toString() || "Something went wrong.",
        type: "danger",
      });
    },
  });

  const handleLogin = (e) => {
    e.preventDefault();
    if (!(email && password)) {
      notification({
        title: "Form Error",
        message: "Please, enter your email and password",
        type: "danger",
      });
      return;
    }
    loginMutation.mutate({
      endpoint :"Auth",
      extra: "login",
      method: "POST",
      body: { email, password },
    });
  };

  const { isLoading } = loginMutation;

  return (
    <div className="flex flex-col items-center justify-center min-h-screen text-center">
      <Head>
        <title>Alat For Corporative</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon-new.ico" />
      </Head>
      <main className="flex flex-col w-full flex-1">
        <div className="flex w-full justify-center relative bg-dark-purple">
          <Image
            src="/new-bg.png"
            alt="Alat for Cooperative"
            className="w-full object-fill absolute bg-dark-purple h-fit"
            width={500}
            height={500}
            priority
          />
          <div className="flex p-16 flex-col w-full text-center justify-center items-center z-10">
            <Link href="/">
              <Image
                src="/logo.png"
                alt="Alat for Cooperative"
                width={75}
                height={75}
              />
            </Link>
            <div className="bg-white w-full max-w-md mt-10 p-10 py-14 rounded-md text-left">
              <div>
                <h2 className="text-3xl font-bold mb-4 text-dark-purple">
                  Log in
                </h2>
                <p className="text-gray-500">
                  Continue to your cooperative account
                </p>
              </div>
              <div className="mt-6">
                <label className="font-semibold w-full">Email Address</label>
                <div className="p-2 flex mb-5 mt-5 rounded-md border justify-between items-center border-input-outline bg-input-fill">
                  <input
                    type="email"
                    name="email"
                    value={email}
                    onChange={handleEmailChange}
                    label="Email Address"
                    placeholder="Email Address"
                    className="bg-input-fill 
                    outline-none text-sm flex-1 h-8"
                  />
                </div>
              </div>
              <div className="mt-6">
                <label className="font-semibold w-full">Password</label>
                <div className="p-2 flex mb-5 mt-5 rounded-md border justify-between items-center border-input-outline bg-input-fill">
                  <input
                    type={inputType}
                    name="password"
                    value={password}
                    onChange={handlePasswordChange}
                    label="Password"
                    placeholder="Password"
                    className="bg-input-fill outline-none text-sm flex-1 h-8"
                  />
                  <span className=" text-gray-700">
                    {inputType === "password" ? (
                      <BsEye
                        className="w-5 h-auto cursor-pointer items-center text-[#B5B6B6]"
                        onClick={() => setInputType("text")}
                      />
                    ) : (
                      <BsEyeSlash
                        className="w-5 h-auto cursor-pointer"
                        onClick={() => setInputType("password")}
                      />
                    )}
                  </span>
                </div>
              </div>
              <div className="text-dark-purple w-full font-semibold text-sm">
                <Link href="/forgot-password">Forgot Password?</Link>
              </div>
                <button
                  className={`${
                    buttonDisabled && "bg-light-purple text-gray-300"
                  } rounded-md w-full px-12 py-2 text-center mt-8 inline-block font-semibold ${
                    !buttonDisabled &&
                    "hover:bg-dark-purple hover:text-white border border-dark-purple text-dark-purple"
                  }`}
                  type="submit"
                  disabled={buttonDisabled}
                  onClick={handleLogin}
                >
                {isLoading ? "Loading..." :"Login"}
                </button>
              <p className="mt-3 font-semibold text-xs text-center">
                New Here?{"  "}
                <Link href="/">
                  <span className="text-dark-purple font-bold">
                    Get started
                  </span>
                </Link>
              </p>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};

export default Login;
